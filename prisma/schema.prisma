generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  emailVerified  DateTime? 
  accounts      Account[]
  sessions      Session[]
 
  blogs         Blog[]
  projects      Project[]
  comments      Comment[]
  commentLikes  CommentLike[]

  @@map("users")
}

model Blog {
  id        String   @id @default(cuid())
  slug      String   @unique
  title     String
  content   String   @db.Text
  createdAt DateTime @default(now())
  views     Int      @default(0)
  userId    String   @map("created_by")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]

  @@map("blogs")
}   

model Comment {
  id         String     @id @default(cuid())
  blogId     String
  content    String     @db.Text
  createdAt  DateTime   @default(now())
  parentId   String?    // for replies
  userId     String?
  blog       Blog       @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user       User?      @relation(fields: [userId], references: [id])
  parent     Comment?   @relation("CommentReplies", fields: [parentId], references: [id])
  replies    Comment[]  @relation("CommentReplies")
  likes      CommentLike[]

  @@map("comments")
}

model CommentLike {
  id        String   @id @default(cuid())
  commentId String
  userId    String
  createdAt DateTime @default(now())

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
  @@map("comment_likes")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  techs       ProjectTech[]

  @@map("projects")
}

model Tech {
  id        String    @id @default(cuid())
  name      String    
  projects  ProjectTech[]

  @@map("techs")
}

model ProjectTech {
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  tech      Tech     @relation(fields: [techId], references: [id])
  techId    String

  @@id([projectId, techId])
  @@map("project_techs")
}
